package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;

parser code {:
	
	Logger log = Logger.getLogger(getClass());
	
	public void report_fatal_error(string message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error(message, info);
	}
	
	public void syntax_error(Symbol cur_token)
	{
		report_error("\nSintaksna greska", cur_token);
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
	}
	
	public void report_error(String message, Object info)
	{
		StringBuilder msg = new StringBuilder(message);
		if(info instanceof Symbol)
		{
			msg.append(" na liniji ").append(((Symbol)into).left);
		}
		log.error(msg.toString());
	}
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if(s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/**
 *  TERMINALS: 
 *  
 *  CONTROL FLOW
 *  LITERALS
 *  PUNCTUATION
 *  OPERATORS
 *  	ARITHMETIC
 *  	COMPARISON
 *  	LOGIC
 *  	ASSIGNMENT
 *  	SIDE-EFFECT
 *  	ALLOCATION
 *  PARENTHESES
 *  CLASS REALATED
 *  OTHER
 *  
 */

/** CONTROL FLOW TERMINALS */
terminal IF, ELSE, BREAK, DO, WHILE, CONTINUE, RETURN;


/** LITERALS */
terminal Integer NUMBER;
terminal String CHAR;
terminal String STRING;
terminal BOOL;


/** PUNCTUATION */
terminal COMMA, SEMICOLON, DOT;


/** OPERATORS */

/** ARITHMETIC OPERATORS */
terminal PLUS, MINUS, MULTUPLY, DIV, MOD;

/** COMPARISON OPERATORS */
terminal EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUEL, LESS_OR_EQUEL;

/** LOGIC OPERATORS */
terminal AND, OR;

/** ASSIGNMENT */
terminal ASSIGN;

/** SIDE-EFFECT */
terminal INC, DEC;

/** ALLOCATION */
terminal NEW;

/** END OF OPERATORS */


/** PARENTHESES */
terminal	OPEN_PARENTHESES, 	CLOSE_PARENTHESES,
			OPEN_BRACES, 		CLOSE_BRACES,
			OPEN_CHEVRONS, 		CLOSE_CHEVRONS;


/** CLASS RELATED */
terminal CLASS, EXTENDS;


/** OTHER */
terminal IDENT, PROG, PRINT, READ, VOID, CONST;

/**
 * END OF TERMINALS
 */





/** NON TERMINALS */

non terminal Program;

non terminal Decl;
non terminal ConstDecl, VarDecl, ClassDecl, MethodDecl;

non terminal FormalPars;
non terminal Statement;
non terminal DesignatorStatement;
non terminal Designator;
non terminal ActPars;
non terminal Condition, CondTerm, CondFact;
non terminal Expr;
non terminal Term;
non terminal Factor;
non terminal Relop, Addop, Mulop;
non terminal Type;


non terminal DeclAssignmenList;
non terminal VarDeclList, VarDeclElem;
non terminal ClassBodyDecl;
non terminal MultipleVarDecl;
non terminal MultipleMethodDecl;
non terminal TerminalStatement;
non terminal MultipleStatement, MultipleStatementHelper;
non terminal FormalPar;
non terminal MultipleAddopTerm;
non terminal MultipleMulopFactor;
non terminal DesignatorElem, MultipleDesignatorElem;


non terminal ReturnType;
non terminal Literal;

/** END OF NON TERMINALS */





Program ::= PROG IDENT OPEN_BRACES MethodDecl CLOSE_BRACES
			|
			PROG IDENT Decl OPEN_BRACES MethodDecl CLOSE_BRACES
			;


Decl ::= ConstDecl
		 |
		 VarDecl
		 |
		 ClassDecl
		 |
		 Decl ConstDecl
		 | 
		 Decl VarDecl
		 |
		 Decl ClassDecl
		 ;


Literal ::= NUMBER
			|
			STRING
			|
			BOOL
			;


DeclAssignmenList ::= IDENT ASSIGN Literal
					  |
					  DeclAssignmenList COMMA IDENT ASSIGN Literal
					  ;

ConstDecl ::= CONST Type DeclAssignmenList SEMICOLON
			  ;

VarDeclElem ::= IDENT
				|
				IDENT OPEN_CHEVRONS CLOSE_CHEVRONS
				;

VarDeclList ::= VarDeclElem
				|
				VarDeclList COMMA VarDeclElem
				;

VarDecl ::= Type VarDeclList SEMICOLON
			;

MultipleVarDecl ::= VarDecl
				   |
				   MultipleVarDecl VarDecl
				   ;

ClassBodyDecl ::= MultipleVarDecl
				  |
				  OPEN_BRACES MultipleMethodDecl CLOSE_BRACES
				  |
				  MultipleVarDecl OPEN_BRACES MultipleMethodDecl CLOSE_BRACES
				  ;

ClassDecl ::= CLASS IDENT Type OPEN_BRACES ClassBodyDecl CLOSE_BRACES
			  |
			  CLASS IDENT EXTENDS Type OPEN_BRACES ClassBodyDecl CLOSE_BRACES
			  |
			  CLASS IDENT Type OPEN_BRACES CLOSE_BRACES
			  |
			  CLASS IDENT EXTENDS Type OPEN_BRACES CLOSE_BRACES
			  ;
		
ReturnType ::= Type
			   |
			   VOID
			   ;

MethodDecl ::= 	ReturnType IDENT OPEN_PARENTHESES CLOSE_PARENTHESES MultipleVarDecl OPEN_BRACES MultipleStatement CLOSE_BRACES
				|
				ReturnType IDENT OPEN_PARENTHESES FormalPars CLOSE_PARENTHESES MultipleVarDecl OPEN_BRACES MultipleStatement CLOSE_BRACES
				|
				ReturnType IDENT OPEN_PARENTHESES CLOSE_PARENTHESES MultipleVarDecl OPEN_BRACES CLOSE_BRACES
				|
				ReturnType IDENT OPEN_PARENTHESES FormalPars CLOSE_PARENTHESES MultipleVarDecl OPEN_BRACES CLOSE_BRACES
				;

FormalPar ::= Type IDENT 
				|
			   Type IDENT OPEN_CHEVRONS CLOSE_CHEVRONS
			  ;

FormalPars ::= FormalPar
			  	|
			   FormalPars COMMA FormalPar
			   ;

Type ::= IDENT
		;

TerminalStatement ::= DesignatorStatement SEMICOLON
					|
					BREAK SEMICOLON
					|
					CONTINUE SEMICOLON
					|
					RETURN SEMICOLON
					|
					RETURN Expr SEMICOLON
					|
					READ OPEN_PARENTHESES Designator CLOSE_PARENTHESES SEMICOLON
					|
					PRINT OPEN_BRACES Expr CLOSE_PARENTHESES SEMICOLON
					|
					PRINT OPEN_BRACES Expr  COMMA NUMBER CLOSE_PARENTHESES SEMICOLON
					|
					/* empty */
					OPEN_BRACES CLOSE_BRACES
					;

Statement ::=  	TerminalStatement
				|
				IF OPEN_PARENTHESES Condition CLOSE_PARENTHESES Statement
				|
				IF OPEN_PARENTHESES Condition CLOSE_PARENTHESES Statement ELSE Statement
				|
				DO Statement WHILE OPEN_PARENTHESES Condition CLOSE_PARENTHESES SEMICOLON
				|
				OPEN_BRACES MultipleStatementHelper CLOSE_BRACES
				;
					
/*
Statement ::= 	DesignatorStatement SEMICOLON
				|
				IF OPEN_PARENTHESES Condition CLOSE_PARENTHESES Statement
				|
				IF OPEN_PARENTHESES Condition CLOSE_PARENTHESES Statement ELSE Statement
				|
				DO Statement WHILE OPEN_PARENTHESES Condition CLOSE_PARENTHESES SEMICOLON
				|
				BREAK SEMICOLON
				|
				CONTINUE SEMICOLON
				|
				RETURN SEMICOLON
				|
				RETURN Expr SEMICOLON
				|
				READ OPEN_PARENTHESES Designator CLOSE_PARENTHESES SEMICOLON
				|
				PRINT OPEN_BRACES Expr CLOSE_PARENTHESES SEMICOLON
				|
				PRINT OPEN_BRACES Expr  COMMA NUMBER CLOSE_PARENTHESES SEMICOLON
				|
				/* empty *
				OPEN_BRACES CLOSE_BRACES 
				|
				OPEN_BRACES MultipleStatementHelper CLOSE_BRACES
				;

*/
				
MultipleStatement ::= MultipleStatement Statement
					  |
					  Statement
					  ;

MultipleStatementHelper ::= MultipleStatementHelper Statement
					  		|
					  		Statement
					  		;
					  
DesignatorStatement ::= Designator ASSIGN Expr
						|
						Designator OPEN_PARENTHESES CLOSE_PARENTHESES
						|
						Designator OPEN_PARENTHESES ActPars CLOSE_PARENTHESES
						|
						Designator INC
						|
						Designator DEC
						;

ActPars ::=  Expr
			|
			ActPars COMMA Expr
			;
			
Condition ::= CondTerm
			  |
			  Condition OR CondTerm
			  ;
CondTerm ::= CondFact 
			 |
			 CondTerm AND CondFact
			 ;
CondFact ::= Expr
			 |
			 Expr Relop Expr
			 ;
			 
Expr ::= Term MultipleAddopTerm
		 |
		 MINUS Term MultipleAddopTerm
		 ;
		 
MultipleAddopTerm ::= MultipleAddopTerm Addop Term
					  |
					  /* empty */
					  ;
Term ::= Factor
		|
		Factor MultipleMulopFactor
		;

MultipleMulopFactor ::= MultipleMulopFactor Mulop Factor
						|
						Mulop Factor
						;

Factor ::= Designator
			|
			Designator OPEN_PARENTHESES CLOSE_PARENTHESES
			|
			Designator OPEN_PARENTHESES ActPars CLOSE_PARENTHESES
			|
			NUMBER
			|
			STRING
			|
			BOOL
			|
			NEW Type
			|
			NEW Type OPEN_CHEVRONS Expr CLOSE_CHEVRONS
			|
			OPEN_PARENTHESES Expr CLOSE_PARENTHESES
			;

			
DesignatorElem ::= DOT IDENT
					|
					OPEN_CHEVRONS Expr CLOSE_CHEVRONS
					;
					
MultipleDesignatorElem ::= MultipleDesignatorElem DesignatorElem
							|
							DesignatorElem
							;
Designator ::= IDENT
				|
				IDENT MultipleDesignatorElem
				;
				
Relop ::= 	EQUAL
			|
			NOT_EQUAL
			|
			GREATER
			|
			LESS
			|
			GREATER_OR_EQUEL
			|
			LESS_OR_EQUEL
			;
			
Addop ::= 	PLUS
			|
			MINUS
			;
			
Mulop ::= 	MULTUPLY
			|
			DIV
			|
			MOD
			;