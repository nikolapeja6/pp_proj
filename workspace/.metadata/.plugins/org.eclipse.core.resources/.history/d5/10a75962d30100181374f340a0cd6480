package rs.ac.bg.etf.pp1;

import java_cup.runtime.Symbol;


%%

%{
	private Symbol new_symbol(int type){
		return new Symbol(type, yyline+1, yycolumn);
	}
	
	private Symbol new_symbol(int type, Object value){
		return new Symbol(type, yyline+1, yycolumn, value);
	}
	
%}

%cup
%line
%column


%xstate COMMENT


%eofval{
	return new_symbol(sym.EOF);
%eofval}

%%

" "			{ }
"\b"		{ }
"\t"		{ }
"\r\n"		{ }
"\f"		{ }

<YYINITIAL> "program" 	{return new_symbol(sym.PROG, yytext());}
<YYINITIAL> "break"		{return new_symbol(sym.BREAK, yytext());}
<YYINITIAL> "class"		{return new_symbol(sym.CLASS, yytext());}
<YYINITIAL> "else"		{return new_symbol(sym.ELSE, yytext());}
<YYINITIAL> "if"		{return new_symbol(sym.IF, yytext());}
<YYINITIAL> "new"		{return new_symbol(sym.NEW, yytext());}
<YYINITIAL> "print"		{return new_symbol(sym.PRINT, yytext());}
<YYINITIAL> "return"	{return new_symbol(sym.RETURN, yytext());}
<YYINITIAL> "void"		{return new_symbol(sym.VOID, yytext());}
<YYINITIAL> "do"		{return new_symbol(sym.DO, yytext());}
<YYINITIAL> "while"		{return new_symbol(sym.WHILE, yytext());}
<YYINITIAL> "extends"	{return new_symbol(sym.EXTENDS, yytext());}
<YYINITIAL> "continue"	{return new_symbol(sym.CONTINUE, yytext());}

<YYINITIAL> [a-z|A-Z][a-z|A-Z|0-9|_]* 	{return new_symbol(sym.IDENT, yytext());}
<YYINITIAL> [0-9]+ 						{return new_symbol(sym.NUMBER, new Integer(yytext()));}
<YYINITIAL> '[[:print:]]' 				{return new_symbol(sym.CHAR, new String(yytext()[1]));}
<YYINITIAL> \"[[:print:]]*\" 			{String text = yytext(); return new_symbol(sym.STRING, text.substring(1, text.length()-1)));}
<YYINITIAL> "true" | "false" 			{return new_symbol(sym.NUMBER, new Boolean(yytext());}

<YYINITIAL> "+"		{return new_symbol(sym.PLUS);}
<YYINITIAL> "-"		{return new_symbol(sym.MINUS);}
<YYINITIAL> "*"		{return new_symbol(sym.MULTUPLY);}
<YYINITIAL> "/"		{return new_symbol(sym.DIV);}
<YYINITIAL> "%"		{return new_symbol(sym.MOD);}
<YYINITIAL> "="		{return new_symbol(sym.ASSIGN);}
<YYINITIAL> "=="	{return new_symbol(sym.EQUAL);}
<YYINITIAL> "!="	{return new_symbol(sym.NOT_EQUAL);}
<YYINITIAL> ">"		{return new_symbol(sym.GREATER);}
<YYINITIAL> "<"		{return new_symbol(sym.LESS);}
<YYINITIAL> ">="	{return new_symbol(sym.GREATER_OR_EQUEL);}
<YYINITIAL> "<="	{return new_symbol(sym.LESS_OR_EQUEL);}
<YYINITIAL> "&&"	{return new_symbol(sym.AND);}
<YYINITIAL> "||"	{return new_symbol(sym.OR);}
<YYINITIAL> "++"	{return new_symbol(sym.INC);}
<YYINITIAL> "--"	{return new_symbol(sym.DEC);}
<YYINITIAL> ","		{return new_symbol(sym.COMMA);}
<YYINITIAL> ";"		{return new_symbol(sym.SEMICOLON);}
<YYINITIAL> "."		{return new_symbol(sym.DOT);}
<YYINITIAL> "("		{return new_symbol(sym.OPEN_PARENTHESES);}
<YYINITIAL> ")"		{return new_symbol(sym.CLOSED_PARENTHESES);}
<YYINITIAL> "{"		{return new_symbol(sym.OPEN_BRACES);}
<YYINITIAL> "}"		{return new_symbol(sym.CLOSED_BRACED);}
<YYINITIAL> "["		{return new_symbol(sym.OPEN_CHEVRONS);}
<YYINITIAL> "]"		{return new_symbol(sym.CLOSED_CHEVRONS);}


"//"				{yybegin(COMMENT);}
<COMMENT> . 		{yybegin(COMMENT);}
<COMMENT> "\r\n" 	{yybegin(YYINITIAL);}



. {System.err.println("Leksicka greska ("+yytext()+") u liniji " + (yyline + 1));}

