package rs.ac.bg.etf.pp1;

import java.util.Collection;
import java.util.Stack;

import javax.management.StandardEmitterMBean;

import org.apache.log4j.Logger;

import com.sun.org.apache.xalan.internal.xsltc.compiler.util.MethodType;

import rs.ac.bg.etf.pp1.CounterVisitor.FormParamCounter;
import rs.ac.bg.etf.pp1.CounterVisitor.VarCounter;
import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.Obj;
import rs.etf.pp1.symboltable.concepts.Struct;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;
import sun.util.logging.resources.logging;

public class CodeGenerator extends VisitorAdaptor {

	public int staticVarCount;
	public int totalStaticDataSize;
	private int mainPc;
	
	private Stack<Integer> jmpNotThen = new Stack<>();
	private Stack<Integer> jmpEndThen = new Stack<>();
	private Stack<Integer> jmpWhileBegin = new Stack<>();
	
	private Stack<Stack<Integer>> jmpBreak = new Stack<>();
	private Stack<Stack<Integer>> jmpContinue = new Stack<>();

	Logger log = Logger.getLogger(getClass());

	
	public int getMainPc() {
		return mainPc;
	}
	
	private Obj currentClassObj = null;
	private Obj currentClassDecl = null;

	
	public void visit(StatementReturnVoid returnVoid)
	{
		Code.put(Code.exit);
		Code.put(Code.return_);
	}
	
	public void visit(StatementReturnValue returnValue)
	{
		Code.put(Code.exit);
		Code.put(Code.return_);
	}
	
	public void visit(PrintStatementComplex printStatementComplex) {
		if (printStatementComplex.getExpr().struct == Tab.intType) {
			Code.load(printStatementComplex.getConstant().obj);
			Code.put(Code.print);
		} else {
			Code.load(printStatementComplex.getConstant().obj);
			Code.put(Code.bprint);
		}
	}

	public void visit(PrintStatement printStatement) {

		if (printStatement.getExpr().struct == Tab.intType) {
			Code.put(Code.const_5);
			Code.put(Code.print);
		} else {
			Code.put(Code.const_1);
			Code.put(Code.bprint);
		}
	}

	public void visit(ReadStatement readStatement) {
		if (readStatement.obj.getType() == Tab.intType) {
			Code.put(Code.read);
			Code.store(readStatement.obj);
		} else {
			Code.put(Code.bread);
			Code.store(readStatement.obj);
		}
	}

	public void visit(NewClassBegin classBegin)
	{
		currentClassDecl = classBegin.obj;
		Obj obj = GlobalStuff.classTypeObjects.get(currentClassDecl.getName());
		obj.setAdr(GlobalStuff.vTableAddress);
	}
	
	public void visit(ClassDeclEnd1 classEnd)
	{
		log.debug("updating vTableAddress by "+currentClassDecl.getName() + " class. OldValue =  "+GlobalStuff.vTableAddress);
		GlobalStuff.UpdateVTableAddress(currentClassDecl.getName());
		log.debug("^new value = "+GlobalStuff.vTableAddress);
		currentClassDecl = null;
	}
	
	@Override
	public void visit(MethodNameAndRetType1 MethodTypeName) {
		if ("main".equalsIgnoreCase(((MethodNameAndRetType1) MethodTypeName).getName())) {
			mainPc = Code.pc;
			
			Integer[] data = GlobalStuff.GetVTablesInitializationValues();
			
			for(int i =0; i< data.length; i++ ){
				Code.loadConst(data[i]);
				Code.put(Code.putstatic);
				Code.put2(GlobalStuff.initialVTableAddress + i);
			}
		}
		MethodTypeName.obj.setAdr(Code.pc);

		// Collect arguments and local variables.
		SyntaxNode methodNode = MethodTypeName.getParent();
		VarCounter varCnt = new VarCounter();
		methodNode.traverseTopDown(varCnt);
		FormParamCounter fpCnt = new FormParamCounter();
		methodNode.traverseTopDown(fpCnt);
		
		if(currentClassDecl != null)
		{
			GlobalStuff.UpdateAddressOfFunction(currentClassDecl.getName(), MethodTypeName.getName(), Code.pc);
		}
		
		// Generate the entry.
		Code.put(Code.enter);
		Code.put(fpCnt.getCount());
		Code.put(varCnt.getCount());
	}

	public void visit(MethodBegin1 methodBegin1){
		Obj obj = methodBegin1.obj;
		
		Collection<Obj> col = obj.getLocalSymbols();
		
		Stack<Obj> objs = new Stack<>();
		int i =0;
		for(Obj o: col)
		{
			if(i == obj.getLevel())
				break;
			objs.push(o);
			i++;

		}
		
		while(!objs.isEmpty())
		{
			Code.store(objs.pop());
		}
	}
	
	public void visit(MethodEnd1 methodEnd) {
		Code.put(Code.exit);
		Code.put(Code.return_);
	}

	public void visit(DesignatorStatementAssignment designatorStatementAssignment) {		
		
		if(designatorStatementAssignment.getLValueDesignator() instanceof LValueClassDesignator)
		{
			Obj obj =  ((LValueClassDesignator)designatorStatementAssignment.getLValueDesignator()).getDesignator().obj;
			// class designator.
			Code.store(obj);
			/*
			Code.load(lValueObj);
			Code.loadConst(totalStaticDataSize);
			Code.put(Code.putfield);
			Code.loadConst(0);
			*/
		}
		else
		{
			Obj lValueObj = designatorStatementAssignment.getLValueDesignator().obj;
			Code.store(lValueObj);
		}
		
	}
	
	// TODO
	/*
	public void visit(DesignatorClassElementSimple designator){
		Code.put(Code.getfield);
		Code.load(designator.obj);
	}
	*/
	
	// TODO
	/*
	public void visit(DesignatorClassElementArray designator)
	{
		Code.put(Code.get);
	}
	*/
	public void visit(DesignatorStatementFunctionCall designatorStatementFunctionCall)
	{
		Obj obj = designatorStatementFunctionCall.obj; 
		
		int dstAdr = obj.getAdr() - Code.pc;
		Code.put(Code.call);
		Code.put2(dstAdr);
		
		if(obj.getType() != Tab.noType){
			Code.put(Code.pop);
		}
	}
	
	public void visit(DesignatorStatementFunctionCallComplex complexFunctionCall){
		
		Obj obj = complexFunctionCall.obj; 
		
		// len(array)
		if(obj.getName().equals("len")){
			Code.put(Code.arraylength);
			if(obj.getType() != Tab.noType){
				Code.put(Code.pop);
			}
			return;
		}
		
		if(obj.getName().equals("ord") ||obj.getName().equals("char") ){
			if(obj.getType() != Tab.noType){
				Code.put(Code.pop);
			}
			return;
		}
		
		
		int dstAdr = obj.getAdr() - Code.pc;
		Code.put(Code.call);
		Code.put2(dstAdr);
		
		if(obj.getType() != Tab.noType){
			Code.put(Code.pop);
		}
	}

	
	public void visit(DesignatorClassElement1 designatorClassElement){
		Code.load(designatorClassElement.obj);
	}
	
	public void visit(FactorNewObject newObj)
	{
		log.debug("new called with level = "+newObj.obj.getType().getNumberOfFields());
		log.debug("class is "+newObj.obj.getType().getKind());
		
		String className = ((Type1)newObj.getType()).getI1();
		Obj typeObj = GlobalStuff.classTypeObjects.get(className);
		int vTableAddress = typeObj.getAdr();
		
		Code.put(Code.new_);
		Code.put2(newObj.obj.getType().getNumberOfFields()*4);
		Code.put(Code.dup);
		Code.loadConst(vTableAddress); // v_table value
		Code.put(Code.putfield);
		Code.put2(0);
	}
	
	public void visit(MethodDesignator1 methodDesignator1) {
		if(methodDesignator1.getParent() instanceof RValueMethodCall1 || methodDesignator1.getParent() instanceof RValueMethodCall2){
			Code.put(Code.dup);
			Code.put(Code.putstatic);
			Code.put2(0);
		}
	}
	
	public void visit(RValueMethodCall1 rValueMethodCall){
		String methodName = ((MethodDesignator1)rValueMethodCall.getMethodDesignator()).getDesignator().obj.getName();
		
		RValueMethodCallStuff(methodName);
	}
	
	public void visit(RValueMethodCall2 rValueMethodCall){
		String methodName = ((MethodDesignator1)rValueMethodCall.getMethodDesignator()).getDesignator().obj.getName();
		
		RValueMethodCallStuff(methodName);
	}
	
	private void RValueMethodCallStuff(String methodName){
		log.debug("class methoad call " + methodName);

		Code.put(Code.getstatic);
		Code.put2(0);
		Code.put(Code.getfield);
		Code.put2(0);
		Code.put(Code.invokevirtual);
		for(int i =0; i< methodName.length(); i++)
			Code.put2(methodName.charAt(i));
		Code.put2(-1);
	}

	public void visit(DesignatorStatementInc designatorStatementInc) {
		Code.put(Code.const_1);
		Code.load(designatorStatementInc.getLValueDesignator().obj);
		Code.put(Code.add);
		Code.store(designatorStatementInc.getLValueDesignator().obj);
	}

	public void visit(DesignatorStatementDec designatorStatementDec) {
		Code.load(designatorStatementDec.getLValueDesignator().obj);
		Code.put(Code.const_1);
		Code.put(Code.sub);
		Code.store(designatorStatementDec.getLValueDesignator().obj);
	}
	
	// 	(MatchedIf)	IF OPEN_PARENTHESES Condition CLOSE_PARENTHESES MatchedThen ELSE Matched
	public void visit(MatchedIf matchedIf)
	{
		// since there was an else, the jmpNotThen has been updated
		// so only the jmpEndThen should be updated
		fixJumpAtEndOfThen();
	}

	
	// (UnmatchedIf)IF OPEN_PARENTHESES Condition CLOSE_PARENTHESES Statement
	public void visit(UnmatchedIf unmatchedIf)
	{
		// since there was not an else, the jmpNotThen needs to be updated
		// and there is no jmpEndThen
		fixJumpAtEndOfCondition();
	}

	// (UnmatchedIfElse)IF OPEN_PARENTHESES Condition CLOSE_PARENTHESES MatchedThen ELSE Unmatched
	public void visit(UnmatchedIfElse unmatchedIfElse)
	{
		// since there was an else, the jmpNotThen has been updated
		// so only the jmpEndThen should be updated
		fixJumpAtEndOfThen();
	}

	
	// jmp to next and correct else jmp
	public void visit(MatchedThen1 matchedThen1)
	{
		// jmp next
		Code.put(Code.jmp);
		jmpEndThen.push(Code.pc);
		Code.put2(0);
		
		// correct else jump at end of condition
		fixJumpAtEndOfCondition();
	}
	
	// jmp to else or continue to then
	public void visit(ConditionMultiple conditionMultiple)
	{
		insertJumpAtEndOfCondition();
	}
	
	// jmp to else or continue to then
	public void visit(ConditionSingle conditionSingle)
	{
		insertJumpAtEndOfCondition();
	}
	
	private void insertJumpAtEndOfCondition(){
		
		// if cond == 0, jmp else 
		Code.loadConst(0);
		Code.put(Code.jcc + Code.eq);
		
		// save current pc and store it as jmp address
		jmpNotThen.push(Code.pc);
		Code.put2(0);
		
	}
	
	private void fixJumpAtEndOfCondition()
	{
		int address = jmpNotThen.pop();
		Code.put2(address, Code.pc - address + 1);
	}
	
	private void fixJumpAtEndOfThen(){
		int address = jmpEndThen.pop();
		Code.put2(address, Code.pc - address + 1);
	}
	
	public void visit(MatchdWhile matchdWhile)
	{
		// if cnd != 0, jmp beginning
		int beginning = jmpWhileBegin.pop();
		Code.loadConst(0);
		Code.put(Code.jcc + Code.ne);
		Code.put2(beginning - Code.pc + 1);
		
		// fix breaks to point to here
		Stack<Integer> breaks = jmpBreak.pop();
		while(!breaks.isEmpty())
		{
			int address = breaks.pop();
			Code.put2(address, Code.pc - address + 1); // TODO check
		}
	}
	
	public void visit(StatementWhile1 statementWhile1){
		
		Stack<Integer> continues = jmpContinue.pop();
		
		while(!continues.isEmpty()){
			int address = continues.pop();
			Code.put2(address, Code.pc - address + 1);
		}
		
	}
	
	public void visit(DoWhileBegin1 doWhileBegin1)
	{
		jmpWhileBegin.push(Code.pc);
		jmpBreak.push(new Stack<>());
		jmpContinue.push(new Stack<>());
	}
	
	//ConditionElement ::= (ConditionElement1) OR CondTerm
	public void visit(ConditionElement1 conditionElement1) {
		
		// if a != 0, jmp true1
		Code.loadConst(0);
		Code.put(Code.jcc+Code.ne);
		Code.put2(11);
		
		// if b != 0, jmp true2
		Code.loadConst(0);
		Code.put(Code.jcc + Code.ne);
		Code.put2(8);
		
		// false: put 0,jmp next 
		Code.loadConst(0);
		Code.put(Code.jmp);
		Code.put2(5);
		
		// true1
		Code.put(Code.pop);
		
		// true2
		Code.loadConst(1);
		
		// next
	}

	//CondTermElement ::= (CondTermElement1) AND CondFact
	public void visit(CondTermElement1 condTermElement1) {
		
		// res = a*b
		Code.put(Code.mul);
		
		// cmp res, 0
		Code.loadConst(0);
		
		// put 1 if neq
		processRelopCnd(Code.ne);
	}
	
	private void processRelopCnd(int cnd)
	{
		// test and jmp if yes
		Code.put(Code.jcc + cnd);
		Code.put2(7);
					
		// no: put 0, jmp next
		Code.loadConst(0);
		Code.put(Code.jmp);
		Code.put2(4);
					
		// yes: put 1
		Code.loadConst(1);
					
		// next
	}

	// CondFactElement ::= (CondFactElement1) Relop Expr;
	public void visit(CondFactElement1 condFactElement1) {

		Relop relop = condFactElement1.getRelop();
		
		int cndCode = -1;
		
		if(relop instanceof RelopEq)
		{
			cndCode = Code.eq;
		}
		
		if(relop instanceof RelopNEq)
		{
			cndCode = Code.ne;
		}
		
		if(relop instanceof RelopGr)
		{
			cndCode = Code.gt;
		}
		
		if(relop instanceof RelopLs)
		{			
			cndCode = Code.lt;
		}
		
		if(relop instanceof RelopGEq)
		{
			cndCode = Code.ge;
		}
		
		if(relop instanceof RelopLEq)
		{
			cndCode = Code.le;
		}
		
		assert(cndCode != -1);
		
		processRelopCnd(cndCode);
	}
	
	

	public void visit(ExprWithMinus exprWithMinus) {
		Code.loadConst(-1);
		Code.put(Code.mul);
	}

	public void visit(ExprElement1 exprElement1) {
		Addop addop = exprElement1.getAddop();

		if (addop instanceof AddopPlus) {
			Code.put(Code.add);
			return;
		}

		if (addop instanceof AddopMinus) {
			Code.put(Code.sub);
			return;
		}

	}

	public void visit(TermElement1 termElement1) {
		Mulop mulop = termElement1.getMulop();

		if (mulop instanceof MulopMultiply) {
			Code.put(Code.mul);
			return;
		}

		if (mulop instanceof MulopDiv) {
			Code.put(Code.div);
			return;
		}

		if (mulop instanceof MulopMod) {
			Code.put(Code.rem);
			return;
		}
	}
	
	public void visit(FuncttionCallFactor functionCallFactor)
	{
		Obj obj = functionCallFactor.obj; 
		
		int dstAdr = obj.getAdr() - Code.pc;
		Code.put(Code.call);
		Code.put2(dstAdr);
	}
	
	public void visit(FuncttionCallFactorComplex functionCallFactor)
	{
		Obj obj = functionCallFactor.obj; 
		
		// len(array)
		if(obj.getName().equals("len")){
			Code.put(Code.arraylength);
			return;
		}
		
		if(obj.getName().equals("ord") || obj.getName().equals("char"))
		{
			return;
		}
		
		int dstAdr = obj.getAdr() - Code.pc;
		Code.put(Code.call);
		Code.put2(dstAdr);
	}

	public void visit(ConstantFactor constantFactor) {
		Code.load(constantFactor.getConstant().obj);
	}

	public void visit(FactorNewArray factorNewArray) {
		Struct elementType = factorNewArray.obj.getType().getElemType();

		Code.put(Code.newarray);

		if (elementType == Tab.intType) {
			Code.put(1);
			return;
		}

		if (elementType == Tab.charType) {
			Code.put(0);
			return;
		}

		System.out.println("unmatched new");

	}

	public void visit(LValueDesignator1 lvDesignator1) {
		/*
		if (lvDesignator1.getDesignator() instanceof DesignatorArray) {
			Code.put(lvDesignator1.obj.getAdr());
		}
		*/
		System.out.println("LValueDesignotr without code gen");
		currentClassObj = null;
	}

	public void visit(RValueDesignator1 rvDesignator1) {
		/*
		 * if(rvDesignator1.getDesignator() instanceof DesignatorArray) {
		 * Code.put(rvDesignator1.obj.getAdr()); }
		 */
		Code.load(rvDesignator1.obj);
		currentClassObj = null;
	}

	public void visit(DesignatorSimple designatorSimple) {

		
	}
	
	public void visit(RValueClassDesignator cls)
	{
		Code.load(cls.obj);
		currentClassObj  =null;
	}
	public void visit(LValueClassDesignator cls)
	{
		currentClassObj = null;
	}

	public void visit(ArrayName1 arrayName1) {
		Code.load(arrayName1.obj);
	}
	
	public void visit(MatchedBreak matchedBreak){
		Code.put(Code.jmp);
		jmpBreak.peek().push(Code.pc);
		Code.put2(0);
	}
	
	public void visit(MatchedContinue matchedContinue)
	{
		Code.put(Code.jmp);
		jmpContinue.peek().push(Code.pc);
		Code.put2(0);
	}

	/*
	 * @Override public void visit(VarDecl VarDecl) { varCount++; }
	 * 
	 * @Override public void visit(FormalParamDecl FormalParam) { paramCnt++; }
	 * 
	 * @Override public void visit(MethodDecl MethodDecl) { Code.put(Code.exit);
	 * Code.put(Code.return_); }
	 * 
	 * @Override public void visit(ReturnExpr ReturnExpr) { Code.put(Code.exit);
	 * Code.put(Code.return_); }
	 * 
	 * @Override public void visit(ReturnNoExpr ReturnNoExpr) {
	 * Code.put(Code.exit); Code.put(Code.return_); }
	 * 
	 * @Override public void visit(Assignment Assignment) {
	 * Code.store(Assignment.getDesignator().obj); }
	 * 
	 * @Override public void visit(Const Const) { Code.load(new Obj(Obj.Con,
	 * "$", Const.struct, Const.getN1(), 0)); }
	 * 
	 * @Override public void visit(Designator Designator) { SyntaxNode parent =
	 * Designator.getParent(); if (Assignment.class != parent.getClass() &&
	 * FuncCall.class != parent.getClass()) { Code.load(Designator.obj); } }
	 * 
	 * @Override public void visit(FuncCall FuncCall) { Obj functionObj =
	 * FuncCall.getDesignator().obj; int offset = functionObj.getAdr() -
	 * Code.pc; Code.put(Code.call); Code.put2(offset); }
	 * 
	 * @Override public void visit(PrintStmt PrintStmt) {
	 * Code.put(Code.const_5); Code.put(Code.print); }
	 * 
	 * @Override public void visit(AddExpr AddExpr) { Code.put(Code.add); }
	 * 
	 */
}
